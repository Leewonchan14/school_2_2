||브랜치||
	: 갈림길 : 하나의 버전 관리의 하나의 가상의 또 다른 저장공간을 만드는것

	특징 : 저장소를 전부 복사하는게 아니라 가상폴더를 사용하여 복제된 구조보다 유연하게 처리할수있다.

	0. 브랜치의 생성

		1) 브랜치 모두 출력 : git branch
		2)브랜치 목록 : git branch -v
		3) footer이름의 브랜치 생성 : git branch footer

	1. 브랜치의 해시 : 커밋ID와 같다(현재 브랜치의 헤드 커밋ID)
		1) 브랜치 커밋ID : git rev-parse 브랜치 이름
		2) 모든 브랜치 짧게 : git branch -v


	2. 브랜치의 이동
		1) 헤더 포인터 이동 : git checkout 브랜치 이름
		2) 이전 브랜치 이동 : git checkout -
		3) 커밋을 하지 않고 이동할때에는 경고메세지가 뜬다.(커밋하고 이동하도록하자)


	3. 브랜치 공간
		1) 각각의 브랜치의 기록 이력 : git log --graph --all
	
	4. HEAD포인터
		1) 헤더포인터는 브랜치의 마지막 커밋마다 있다.
		2) 커밋을 할때에는 헤더포인터를 이용 하여 쉽게 새로운 커밋을 만들수있다.
		3) 헤드의 상대 포인터
			1. ~ : git checkout Head~1 (1이전의 커밋 으로 이동)
		4) A,B 헤드 포인터 : 원격,로컬 저장소는 마지막 커밋이 다를수있다.(상황에 따라 1, 2)
			1. AHEAD : 서버로 전송되지않은 로컬 커밋이 있는것
			2. BHEAD : 로컬저장소로 내려받지 않은 커밋이 있는것

	5. 브랜치 생성과 이동
		1) 생성과 이동을 동시에 할때 : git checkout -b 브랜치_이름
		2) 커밋ID로 이동할때 : git checkout 커밋ID(해시코드7자리)

	6. 원격 브랜치
		: 리모트 브랜치와 같은말
		1) 깃과 깃허브는 각각의 고유한 브랜치를 생성하고 관리한다.
		2) 브랜치의 이름이 서로 같을 필요는 없다.
		3) 브랜치 추적
			: 로컬 브랜치과 원격 브랜치의 연동작업을 위해 상태,관리를 수행
		4) 트래킹 브랜치, 업스트림 브랜치
			1) 트래킹 브랜치 : 리모트 브랜치의 연결정보가 있는 로컬 브랜치
			2) 업스트림 브랜치 : 원격저장소의 연결정보가 있는 원격 저장소에 생성된 원격 브랜치
	7. 브랜치 추적
		1) 브랜치 추적은 트래킹 브랜치를 이용하여 추적
		2) 로컬 저장소 안 .git/refs 폴더 안에 저장되어 있다.

git push -u origin master =>> 
git branch -u origin/브랜치이름??  => 트래킹 브랜치 설정!
git checkout -b aaa origin/aaa???? => 원격 저장소의 aaa브랜치와 로컬 저장소의 aaa브랜치를 연결하며 생성
git checkout --track origin/function => 새로운 브랜치 function 브랜치를 생성후 원격 저장소의 origin/function 브랜치를 업스트림