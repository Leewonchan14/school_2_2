||파일 관리 목로에서 제외 : .gitignore||
	깃으로 관리하고 싶지 않은 파일과 폴더는 별도의 .gitignore 설정 파일 안에 나열해서 적어줌

cat a1.txt 
	: a1.txt내용 출력명령어


.gitignore 파일 표기법
	1. 파일 에서 #으로 시작하는 줄은 주석처리
	2. '*' 는 문자열 대체 => ex) *.obj 오브젝트 파일을 말함
	3. !config.php => 환경설정 파일은 제외하면 안됨

깃저장소 복제 :
외부 저장소를 이요하여 로컬 저장소를 생성하는것

1. 다운로드
	최종버전만 가져오게됨( 이력내용 모른다.)

2. 복제
	명령어 : git clone ~주소
	저장소의 모든 소스 코드를 자동으로 내려받음


커밋 : 의미있는 변경 작업들을 저장소에 기록하는 동작(~를 적어두다)(그래프의 노드라 생각함 편하다.)
	스테이지영역의 파일과 비교해 차이점과 다른점이 커밋 그래프 노드로 생성된다.


||1. git에서의 파일 관리법, 커밋 하는법||

	1. 파일 생성 -> 작업공간(언트랙)
	2. (트랙)파일 - > 스테이지
	3. (커밋1)파일 -> 저장소(버전1)
	4. 수정되면 작업공간에 새로운 수정파일이 생성되고 2~3 반복됌

		스테이지 영역 등록 방법
			1. git add (파일이름)
			2. 파일 등록 취소
			3. git rm --cashed (파일이름)

		등록된 파일의 이름 변경방법
			1. git mv 파일이름 새로운파일이름
				(깃에서는 파일의 내용으로 관리하기 때문에 이름만 바뀌고 나머지는 바뀌지 않는다.)


		커밋에 등록하는방법
			1. 깃에서의 커밋은 수정된 파일마다 스냅샷(순간의 찰나의 사진)을 찍는것과 같다. (스냅샷된 파일들은 모두 기록공간이다.)
			    그리고 그 스냅샷들의 리스트로 버전을 관리 추적한다.

		꼬리에 있는 녀석을 가르키는 포인터를 헤더 포인터라고 한다.


||2 . git commit 하는법||
	
	1. 먼저 git add로 스테이지 영역등록
	2. git commit 으로 커밋한다.
	3 . 메세지 작성 요구 (입력은  esc+i 누른뒤 메세지를 입력후 esc+:+wq엔터 를 누르면 작성 종료됨)
	4. git log : 이제 까지 커밋 이력을 볼수있다.

||3. 커밋이 끝난뒤||
	1. git status 명령어 사용시 워킹트리 클린 문자열이 보인다.
	2. 스테이지 영역이 초기화 되었다는 뜻
	3. 더이상 추가된 파일과 수정된 파일이 없다는 뜻
	4.git log로 종종 확인하는것이 좋다.

커밋들이 생성되어 연결된 노드들을 '브랜치'라고 한다. 그리고 보통 master가 첫번째 이름이며 Head는 최종 버전을 가르킨다.


||4. 트랙된 파일이 수정되었을때||

	1. 기존 파일을 수정하면 modified 상태로 변경됨
	2. 스테이지 영역의 재등록을 하기 위해 git add ~ 명령어 실행(파일이 녹색으로 변한다.)

||5. 두번째 커밋||
	
	1. git commit -m "아무거나 적기" 로 에디터 없이 설명문 추가

||6. 깃에서 파일 내용 변경 확인 방법||

	1. diff a1.txt a2.txt 
		다르면 두개의 내용을 보여주며 비교해준다.
		같으면 아무내용 뜨지 않는다
	2. 해시함수 이용 : 
			sha1sum a1.txt
			sha1sum a2.txt
			가장 보안이 좋은 해시 함수는 sha256이다.

||7. git log시 확인||
	1. git log 시 나오는 3가지 정보
		1. commit : 커밋아이디~
		2. Author : 사용자~ 사용자 이메일~
		3. Date : 날짜~
	2. 간략 로그
		1. git log --pretty=show 
			간단한 깃로그를 보여준다.
	3. 특정 커밋의 상세정보 보는법
		1. git show 커밋 아이디
		2. 특정파일의 로그
			git show index.htm

||8. 커밋아이디||
	1. 커밋아이디는 SHA1 해시 함수로 파일을 돌린 해시값이다.
	2. 해시값은 16진수로 되어있는 40자리 이다.
	3. 단축키
		: 앞자리 최소 7글자만 사용해도 파일의 변경을 확인 할수 있다


||9.diff 명령어||
	1. diff명령어는 커밋간 차이를 확인함(인수로 입력된 파일들의 줄마다 비교하여 결과 출력)
	2. diff -u file01.txt file02.txt
		출력값중 -는 왼쪽 파일에만, +는 오른쪽 파일에만 공통된 라인도 표시
	3. diff -U 0 file01.txt file02.txt
		출력값중 -는 왼쪽 파일에만, +는 오른쪽 파일에만
	4. 아직 add안했으면 작업공간, 스테이지 영역간 변경사항 확인가능하다.
	5. git diff
		현재 작업공간 파일과 최신 커밋과의 차이점 (스테이지와, 워킹 디렉토리 비교)
	6. git add index.htm 이후 git diff
		현재 작업공간이 스테이지 영역에 반영되어 변경점이 없다.
	7. git diff head
		를 이용하여 최신커밋과 이전 커밋을 비교하여 출력할수있다.