1. 싱크로 나이제션 : 동시에 메모리를 공유할떄 여러가지 명령어를 하나로 묶어 명령어 하나로 취급하는것
	: read와 write 사이의 다른명령어가 있으면 안된다.
	1) load reserved : 읽은 메모리를 레지스터에 저장, 예약을 걸어 초깃값을 저장
	2) strore conditional : 레지스터를 읽어 메모리에 저장 초깃값과 비교하여 달라짐과 안달라짐 구별
		load와 store 사이의 숫자 업데이트가 없을때 succes(0)
		업데이트가 있을때 false
	1. 아토믹 스왑 : whlie 문을 사용해 0일때까지 반복하여 사용함
	2. 락 : 자신이 쓰면 0 대신 1을 넣어 쓰고있는중이라고 다른 코어가 쓰지 못하게함
		

2. 메모리 레이아웃
	1.

3. 스태틱 링킹 과정

4. 다이나믹 링킹 과정


||링킹과정....||

5. 컴파일Optimization 의 효과

6. Java/JIT compiled 성능이 괜찮다.

7.머신 레벨 프로그래밍 어떻게하는지

8. MIPS 조금만(RISC-V와 공통점, MIPS가 조상)

9. intel 구조(ISA구조)

10. 어드레싱 모드

11. 디지털 로직
	1) AND 	A*B
	2) OR 	A+B
	3) NOT	Z = 윗줄A
	4) NOT AND = NAND
	5) NOT OR = NOR
	6) 모든 논리 회로는 위에껄로 다 표현 가능(집합 기호를 이용해 표현하면 편하게 바꿀수있다.)
		1) AB+_A_B
		2)(A+B)(_A+_B)

	1) 컴비네이션널 서킷 : 현재 회로 상태와 상관없이 출력값이 정해짐
	2) 시퀸셜 서킷 : 현재 회로 상태에 따라 출력값이 정해짐
	3) 멀티 플렉서 : 여러개의 입력중에서 출력하나만 정해주는것
		: 조합표에 따라 어떤 입력이 선택될지 정한다
	4) 디코더 : 입력되는 조합에 따라 출력중 하나를 정한다.
	5) 클락 입력(입력이 될때 안될때)에 따라 바뀌는 상태에 따라 출력이 달라진다.


	1. Minterms 와 Maxterms 
		1)Minterms : 각각의 변수가 한번씩 and연산 하는것로 모든 경우의 수를 표현 가능하다.
		2)Maxterms : 각각의 변수가 한번씩 or연산 하는것으로 모든 경우의 수를 표현 가능하다.

	2. 출력 데이터 함수를 민텀의 합 또는 맥스텀의 곱으로 표현가능하다!!!
		0	0	1	_A*_B
		0	1	0	_A*B
		1	1	1	A*B
		1	0	0	A*_B
							=> _A*_B + A*B
	3. 맥스텀의 곱은 자료보고 ㅠㅠ


		

12 . 

시험범위는 리스크5까지
	