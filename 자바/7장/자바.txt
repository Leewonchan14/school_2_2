||1.  컬렉션(collection) 이란||
	1. 객체들의 저장소
	2. 객체들의 순서가 있는 컨테이너
	3. 요소의 삽입 삭제에 따른 요소의 위치 이동이 편하다(자동으로 해준다.)

	4. generics 기법을 이용한다.(C++의 templit과 같은 원리)
		기본형을 제외한 특정 타입이 아닌 여려종류 타입으로 변신 가능한 기법 : <E>,<K>,<V>
			ex) Stack<Integer> // Stack<String>
	5. generics구현 방법
		1. class Stack<E>{
			void push(E elemant){ ... }
			E pop(){ ... }
		}

||2. Vector<E> 의 특성||
	1. java,util.Vector에 있다.
	2. 여러 객체 삽입, 삭제, 검색 가능한 클래스
	3. 객체, null 만 삽입 가능함, 기본타입은 wrapper되어 객체로 저장
	4. 선언 방법
		Vector<Integer> v1 = new Vector<Integer>();
	5. 주요 메소드
		1. 

	6. 벡터를 매개변수로 받는 메소드
		void printVector(Vector<Integer> v){
			.....	}

||3. ArrayList<E>의 특성||
	1. 벡터와 비슷한 기능
	2. 단일연결 리스트 처럼 구현되어있다.
	3. 다수 쓰레드가 동시에 ArrayList에 접근할때 동기화 하지 못한다.
		개발자가 스스로 동기화 코드를 작성해야 한다.


||4. Iterator<E>인터페이스||
	1. 요소의 순차적 탐색 효율을 높혀주기 위한 인터페이스
	2. Vector, ArrayList, LinkedList 가 상속받은 인터페이스
	3. iterator()메소드 : 순차적 탐색을 위한 iterator 변수 반환
						C에서 흔히 쓰는 prenode 역할 한다.
		||이터레이터 변수는 이터레이터 타입으로 선언되고 <>안에는 요소의 타입이 들어간다.||
		||모든 컬렉션은 iteration()메소드가 있다.||
		Iterator<Integer> it = v1.iterator();
		while(it.hasNext()){
			int n = it.next();	// 다음 요소 리턴
				}

||5. HashMap<K,V> 키, 밸류||
	1. java.util.HashMap
	2. put(K,V)
	3. get(K) : 없으면 null 반환
	4. 선언 방법
		HashMap<String,String> h = new HashMap<String,String>();
	5. 키값을 사용자 지정 클래스로 할경우 HashCode 오버라이딩 해야만 한다.

||6. LinkedList<E>||

	1. import java.util.LinkedList
	2. vector와ArrayList 와 비슷하게 사용(하지만 더블연결 리스트)

||7. Collection 클래스(인터페이스)||
	
	1. sort(), reverse(), max(), min(), binarySearch()= 특정값 검색
	2. Colletions.sort(mylist) => 정렬된다!!


||8. 제너레이터 만들기||
	1. public class myclass<T> { }
	2. T에는 클래스가 들어가야 한다.

||9. 타입 매개 변수||
	1. <>사이에 들어간다.
	2. 타입 매개변수의 객체는 생성할수없다. => T a = new T();
	3. 배열을 생성할수없지만, 메소드 매개변수에 배열로 들어갈순있다.

||10. 제네릭 메소드 만들기||

public class Generic{
	public static <T> GSstack<T> reverse(GStack<T> a){ }	
}