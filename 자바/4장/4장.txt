클래스 : 붕어빵 틀
객체(instance) = 틀로 만들어진 붕어빵

상속 : 물려주는 행위(물려주면 본인의 필드, 메소드를 사용가능함)
객체 지향의 특성 : 다향성!!!
1. 이름과 매개변수가 같아서 새롭게 정의되는 메소드 : 메소드 오버라이딩
2. 이름은 같지만 매개변수가 달라서 변수에 따라 사용되는 메소드가 달라짐 : 메소드 오버로딩

객체 지향 언어의 목적
1. 소프트웨어의 생산성 향상
2 실세계에 대한 쉬운 모델링

생성자 : 초기화 하는 메소드
1. 클래스이름고 동일
2. 오버로딩 가능
3. 객체당 한번 호출
4. 리턴타입이 없다.!!!!
5. 반드시 호출됨(없어도 자동으로 생성된 생성자가 호출된다.)

this 래퍼런스
구조체의 this와 같은 개념: 현재 클래스에의해 생성된 객체를 지칭
this()로 다른 생성자 호출 가능(반드시 생성자 코드!!!의 제일 처음!!!에 수행되어야한다.)

자바의 패키지는 폴더라고 생각하면 편하다.

접근지정자
1.  private, protected, public, 디폴트(생략) 4가지 이다.
다른클래스에서 접근을 허용할지 안할지 지정하는것

public : 모두 허용
protected : 동일패키지, 자식클래스 허용
디폴트 : 동일 패키지 허용(자식 안된다.)
private : 접근 불가능

클래스의 배열 선언
Circle c[] = new Circle[5];
c[0] = new Circle(1);
c[1] = new Circle(3);
~
c[4] = new Circle(1,3);



static 변수와 non-static 변수
한 클래스에서 static변수는 모든 객체가 그 변수를 공유한다.(같이 사용하는 변수이다.)

스태틱 변수는 객체가 생성되기 전에 사용가능하다!!!!
클래스 이름으로도 접근가능함
Circle.k

1. static 메소드 : non-static멤버에 접근할 수 없다.!!!
객체 생성없이도 실행가능하기 때문에 그렇다.
2. this 사용불가!!!


final 클래스 : 상속 불가능
final 메소드 : 오버라이딩 불가능