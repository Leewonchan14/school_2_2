1) [a-zA-Z0-9] 					는 모든 문자중 찾아라!!
	[\d] : 					숫자만
	[\w] : 					모든 문자 다(숫자 포함)
2) a.b						a + 모든 문자 + b 가 매치된다.
	. 은 모든문자와 매치!!

3) ca{3}t						a{3}은 a가 무조건 3번 나와야 매치!!!
	ca{2,3}					a{2,3} 2번에서 3번 사이 매치

4) ab?c						a+b(있어도 되고 없어도 되고,{0,1})+c


5) 4가지의 re 메소드
	1. match()					: 처음부터 조사
	2. search()					: 전체를 검색
	3. findall()					: 모든 문자열을 리스트로 반환
	4. finditer()				: 모든 문자열을 반복가능한 객체로 반환

6) p = re.compile(정규표현식)
    m = re.match()~~~~
    m.group()

7) match,search 메소드들은 match 객체를 반환한다.!! 4가지 주요 메소드
	1. group()					: 매치된 문자열 반환
	2. start()					: 매치된 문자열 시작 위치 반환
	3. end()					: 매치된 문자열 끝 위치 반환
	4. span()					: (시작, 끝) 튜플 반환

8) 정규식에 \가 많이 들어가는 경우			: r'\string' 을 이용, \를 하나만 써도된다.

9) 앞에 있을때만 매치되게 하기			: ^'string'
10) 뒤에 있을때만 매치되게 하기 			: $'string'

11) 특수한 매치 변수 4가지
	1. \A					: 무조건 앞에 첫글자가 매치
	2. \Z					: 무조건 뒤 마지막 글자가 매치
	3. \b					: 공백(화이트 스페이스)가 매치
	4. \B					: 공백이 아닐떄 사용		ex) re.match('\Bclass\B","aclassb")	=> class 매치된다.

12) 그루핑					: 괄호() 로 묶어준다.

13) 그룹의 네임 지정!!!				:(?P<name>...)

14) 긍정형 전방 탐색, 부정

	1. 긍정형 전방 탐색 : 있는 문자만 매치
		ex) '.*(?=:)'	앞에 : 전까지 문자가 매칭된다.(: 는 매칭되지않는게 포인트)
	2. 부정형 전방 탐색 : 없어야지 매치
		ex) .bat 파일 매치 하기 싫을때 	: .*[.](?!bat).*$

15) 정규식에 매치되는 문자열 바꾼다음 반환		: m.sub(바꿀 문자열 , 바꾸어질 문자열)

16) <.*>를 최소단위로 잘라내기			: <.*?> ?로 탐욕을 억제한다하여 Greedy, Non Greedy 라고 한다.