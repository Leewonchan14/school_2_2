자료구조 - 해시(딕셔너리 구조와 비슷함!)

list의 sort() 와 reverse() 메소드는 객체 요소를 변경하는 메소드(반환하지 않는다.)

f-string 사용법
a = 78.891
print("string",f"{a : .1f}",sep = "123",end = "345")
=> string12378.8345

join함수 사용법
"string".join([1,2,3,4])
=> 1string2string3string4

튜플은 변경할수 없는 자료형이다.(리스트로 캐스팅한다음 변경한다.)

딕셔너리의 생성
dict()함수는 딕셔너리로 만들어주고 매개변수들을 키:값으로 만들어줍니다.

슬라이싱 => s[start:end:step]
start :시작 인덱스(없으면 0)
end : 끝날 인덱스(자신은 포함하지 않는다!!! 없으면 끝까지)
step : 얼마나 끊으며 가져올지 정한다.(음수는 역순)

집합의 연산기호
| 합집합
& 교집합
- 차집합

여러개의 매개변수를 받는 함수
add(*args)
args는 튜플 이다.

add(**kwargs)
kwargs는

lambda 함수 : def를 사용하지 않고 만드는 함수 선언
add = lambda a, b : a+b

zip() 함수 : 매개변수들을 인자하나씩마다 합쳐서 튜플로 만들어 zip자료형으로 반환한다.

난수 생성 방법 : 
import random
random.randint(1,6)
1에서 6사이 난수 반환

파이썬에서 클래스 (self는 메소드마다 첫번째 매개변수로 정의한다. self는 this와 동일하게 사용가능 하지만 self는
클래스 변수에 접근하는것이 아니다. 객채 변수에 접근한다.

class fourcal :
    def __init__(self,first,second):
        self.first = first
        self.second = second

클래스 상속

class 새로운클래스이름(상속할 클래스이름):
    pass

클래스 상속 확인 

issubclass(Student,Person)
=> return True

메소드 오버라이딩 : 덮어쓰기! 재정의 라 생각하면된다(상속받은 클래스에서 재정의)

클래스 변수(자바의 필드 변수+자바의 스태틱 변수)

	클래스명.클래스변수 로 호출 가능

객체.클래스변수 = newdata 해도 클래스 변수의 값은 바뀌지 않고 객체에 새로운 변수만 생길 뿐이다.

스태틱 메소드 사용법
	: @staticmethod
	  def method(): 로 선언한다.

클래스 메소드 사용법
	: @classmethod
	  def method(self): 로 선언한다.

다중 상속
class Student(Person,Human):
	오버라이딩시 앞쪽 Person의 메소드가 호출됨

추상클래스
from abc import *

class 추상메소드(metacalss=ABCMeta):
	@abstractmethod
	def study(self):
		pass

import문 꼭 필요