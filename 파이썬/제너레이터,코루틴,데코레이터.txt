함수안 yield 변수, yield변수를 사용한 함수는 제너레이터 함수이다.

yield 는 양보를 의미 실행을 대기 시킨다!!

def fuction():
	yield 0
	yield 1
	yield 2
for i in fuction():
	print(i)
=> 0,1,2출력됌

g = fuction()

g.__next__(), next(g) 둘다 가능

제네레이터 함수에서 return을 사용하면 StopIteration 예외가 발생된다.


코루틴:
def get_N():
	while True:
		x = (yield)
		print(x)
n = get_N()
n.__next__()
n.send(1)

=> 출력 1

코루틴 안에 예외 발생시키기
def corutine():
	try:
	except 예외명 as e:
		print(e) #예외가 발생되었습니다.
		yield total # total값을 반환함
n.throw(예외명,"예외가 발생되었습니다")

코루틴에서 차례대로 리턴값 받기

코루틴:
	return total
total = yield from 코루틴()	// for문과 비슷



||데코레이터
함수를 매개변수로 받는 함수

def decorater_fuc(fuc):
	fuc()

@decorater_fuc
def hello():
	print(hello)

hello() => hello 출력됨!!!! (@부모 함수를 위에 적는순간 해당 함수는 매개변수로 들어간 부모 함수간된다)


클래스로 데코레이터 만들때!!

class deco:
	def __init__(self,fuc):
		self.fuc = fuc
	def __call__(self):
		self.fuc()
@deco
def hello():
	print("hello")
hello()
=> call매소드 호출된다~

다중 데코레이터 순서

@decorator1
@decorator2
def hello():
    print('hello')
 
decorated_hello = decorator1(decorator2(hello))
decorated_hello()