Unit 34 : 클래스 문제

문제 : Car클래스를 생성하고 차종, 색을 입력받도 show메소드로 차량정보가 출력되는 클래스를 만드세요

답 : 
class Car:
	def __init__(self,CarClass,CarColor):
		self.CarClass = CarClass
		self.CarColor = CarColor
	def show(self):
		print(f"차종 : {self.CarClass}, 색 : {self.CarColor}")

Unit 35 : 정적,클래스 메소드 문제
문제 : Person 인스턴스 생성시 인스턴스 갯수를 보여주는 show 메소드를 포함하는 클래스를 만들어라

답 :
class Person:
	Person.count = 0
	def __init__(self):
		Person.count +=1
	@classmethod
	def show(cls):
		print(cls.count)

Unit 36 클래스 상속 문제

문제 : D는 B와C를 다중상속받고 B와 C는 A를 상속받는 다이아몬드 상속관계를 구현하라

답 : 
class A:
	def __init__(self):
		pass
class B(A):
	def __init__(self):
		pass
class C(A):
	def __init__(self):
		pass
class D(B,C):
	def __init__(self):
		pass

Unit 38 예외 처리 문제
문제 : 0으로 나누었을때 발생되는 예외를 try-except 문을 이용하여 예외출력문을 구현하라

try:
	a = int(input('나누어 지는 숫자 : '))
	b = int(input('나누는 숫자 : '))
except :
	print("예외가 발견되었습니다.")


Unit 39 이터레이터 문제
문제 : 이터레이터 클래스를 직접 구현하라(__iter__,__next__메소드 반드시 구현)

답:
class Counter:
    def __init__(self,stop):
        self.current = 0
        self.stop = stop
    def __iter__(self):
        return self
    def __next__(self):
        if self.current<self.stop:
            current = self.current
            self.current += 1
            return current
        else:
            raise StopIteration
        
for i in Counter(3):
    print(i)


Unit 40 제네레이터 함수
문제 : 제네레이터를 구현하여라

def get_num(stop):
	i = 0
	while i<stop:
		yield i
		i += 1

Unit 41 코루틴 문제

문제 : 코루틴을 활용하여 1부터 10까지합을 구현하여라

답 : 
def corutine():
    total = 0
    while True:
        x = (yield total)
        total += x
co = corutine()
next(co)
for i in range(1,10):
    co.send(i)

Unit 42 데코레이터 문제 만들기

문제 : 사칙연산을 매개변수로 받는 데코레이터 함수를 구현하시오

답 : 
def Cal(calcul):
    def fuc(a,b):
        return calcul(a,b)
    return fuc
@Cal
def add(a,b):
    return a+b
@Cal
def sub(a,b):
    return a-b
@Cal
def mul(a,b):
    return a*b
@Cal
def div(a,b):
    return a/b
print(add(1,3))