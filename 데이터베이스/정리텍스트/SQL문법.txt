||1. SQL DDL(정의어)||

1. 테이블 생성
	
	CREATE TABLE 테이블_이름(
	속성_이름  데이터_타입  [NOT NULL] [DEFAULT 기본_값]
	[PRIMARY KEY(속성_리스트)]
	[UNUQUE (속성_리스트)]
	[FOREIGN KEY (속성_리스트) REFERENCES 테이블_이름(속성_리스트)]
	[ON DELETE 옵션]	[ON UPDATE 옵션] 
	[CONSTRAINT 이름]	 [CHECK(조건)]	);


	1. 테이블 구성하는 각 속성의 이름, 데이터 타입, 기본 제약사항 정의
	2. 기본키 정의
	3. 대체키 정의
	4. 외래키 정의
	5. 데이터 무결성을 위한 제약조건 정의


2. CREATE TABEL 문
	1. 속성의 정의 => 	속성_이름 데이터_타입 [널값허용?] [기본값 필요?]
	2. 널과, 기본값 키워드
		1) not null : 널 안된다
		2) default : 속성의 기본값 지정
	3. 키의 정의
		1) 기본키 : PRIMARY KEY(고객이름)
		2) 대체키 : UNUQUE (속성_리스트)
		3) 외래키 : FOREIGN KEY(소속부서) REFERENCES 부서(부서_번호)
			다른 테이블의 속성을 참조하기 때문에 참조하는 테이블에서 삭제를 요청할때 튜플 처리 방식을 지정해줘야한다.
			1. on update no actoin : 투플변경 금지
			2. on update cascade : 외래키 투플 같이 삭제
			3. on update set null : 외래키 테이블 null 로 설정
			4. on update set default : 외래키 테이블 default 설정

	4. CHECK
		: 정확하고 유용한 데이터 저장하기 위해 제약조건을 설정
		ex) CHECK(재고량 >= 0 AND 재고량 <= 1000)
	

CREATE TABLE 고객(
  고객아이디 VARCHAR(10) NOT NULL,
  고객이름 VARCHAR(10) NOT NULL,
  나이 INT,
  등급 VARCHAR(10) NOT NULL,
  직업 VARCHAR(10),
  적립금 INT DEFAULT 0,
  PRIMARY KEY(고객아이디)
);

CREATE TABLE 제품(
  제품번호 VARCHAR(10) NOT NULL,
  제품명 VARCHAR(10) NOT NULL,
  재고량 INT,
  단가 INT,
  제조업체 VARCHAR(10) NOT NULL,
  PRIMARY KEY(제품번호),
  CHECK(0<=재고량 AND 재고량<=1000)
);

CREATE TABLE 주문(     
  주문번호 CHAR(3) NOT NULL,
  주문고객 VARCHAR(10),
  주문제품 VARCHAR(10) NOT NULL,
  배송지 VARCHAR(10),
  수량 INT,
  주문일자 DATE,
  PRIMARY KEY(주문번호),
  FOREIGN KEY(주문고객) REFERENCES 고객(고객아이디),
  FOREIGN KEY(주문제품) REFERENCES 제품(제품번호)                
);

3. ALTER TABLE 문
	1. ALTER TABLE 테이블_이름 ADD 속성_이름 데이터_타입 null,default 			: 추가
	2. ALTER TABLE 테이블_이름 DROP CULUMN 속성_이름 				: 삭제
	3. ALTER TABLE 테이블_이름 ADD CONSTRAINT 제약조건_이름 제약조건_내용		: 제약조건 추가
		=> ALTER TABLE 고객 ADD CONSTRAINT CHK_AGE CHECK(나이>=20);
	4. ALTER TABLE 테이블_이름 DROP CULUMN CONSTRAINT 제약조건_이름 : 제약조건 삭제	: 제약조건 삭제

4. TABEL 삭제 DROP TABLE문
	1. DROP TABLE 테이블_이름;							: 관련된 외래키 제약조건을 먼저 삭제해야함

||DML(조작어)||

1. SELECT문
	1. 
	SELECT [ ALL | DISTINCT] 속성_이름, 속성_이름2 [AS 다른속성이름] 
	from 테이블_리스트 
	[WHERE 조건]
	[ORDER BY 속성_리스트 [ASC | DESC] ]
		1) ALL키워드 : 중복허용
		2) DISTINCT : 중복x
	 	3) AS : 속성의 이름을 바꾸어 출력
		4) WHERE 조건 : 조건 => 제조업체 = '한빛제과' OR ...
		5) 조건의 LIKE문법	=> 제조업체 LIKE'%빛_ _'
			1. % : 김% ==> 김으로 시작하는 사람
			2. _ : _ ==> 1개의 글자
		6) ORDER BY 속성 [ACS|DESC]
			1. ASC : 오름차순
			2. DESC : 내림차순
	2. 
